// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VK ==================== //
// –≠—Ç–∞ —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞!

console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–æ–ø–µ–π–∫–∞...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ VK Mini App
if (typeof vkBridge !== 'undefined') {
    console.log('–ó–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–∏ VK...');
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è VK
    vkBridge.send('VKWebAppInit', {})
        .then(data => {
            console.log('VK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            startApp();
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK:', error);
            // –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            startApp();
        });
} else {
    console.log('–ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ VK
    startApp();
}

// ==================== –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ==================== //

function startApp() {
    console.log('–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω!');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const addButton = document.getElementById('add-operation-btn');
        const modal = document.getElementById('modal');
        const cancelBtn = document.getElementById('cancel-btn');
        const saveBtn = document.getElementById('save-btn');
        const operationsList = document.getElementById('operations-list');
        const totalBalanceElement = document.getElementById('total-balance');
        
        console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {addButton, modal, cancelBtn, saveBtn});
        
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
        let operations = [];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadOperations();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        addButton.addEventListener('click', showModal);
        cancelBtn.addEventListener('click', hideModal);
        saveBtn.addEventListener('click', saveOperation);
        
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        function showModal() {
            console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            modal.style.display = 'block';
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Å—É–º–º—ã
            setTimeout(() => {
                document.getElementById('amount-input').focus();
            }, 100);
        }
        
        // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        function hideModal() {
            console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ');
            modal.style.display = 'none';
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            document.getElementById('amount-input').value = '';
            document.getElementById('comment-input').value = '';
        }
        
        // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        function saveOperation() {
            const amountInput = document.getElementById('amount-input');
            const categorySelect = document.getElementById('category-select');
            const commentInput = document.getElementById('comment-input');
            
            const amount = amountInput.value;
            const category = categorySelect.value;
            const comment = commentInput.value;
            
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', {amount, category, comment});
            
            if (amount && !isNaN(amount)) {
                const newOperation = {
                    id: Date.now(),
                    amount: parseFloat(amount),
                    category: category,
                    comment: comment,
                    date: new Date().toLocaleDateString('ru-RU'),
                    timestamp: new Date().getTime()
                };
                
                operations.push(newOperation);
                saveOperations();
                updateOperationsList();
                updateBalance();
                hideModal();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—Ö–∞
                if (typeof vkBridge !== 'undefined') {
                    vkBridge.send('VKWebAppShowSnackbar', {
                        text: '–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!'
                    });
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                amountInput.style.borderColor = '#f44336';
                setTimeout(() => {
                    amountInput.style.borderColor = '#e0e0e0';
                }, 1000);
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ localStorage
        function loadOperations() {
            try {
                const saved = localStorage.getItem('kopeyka_operations');
                if (saved) {
                    operations = JSON.parse(saved);
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
                    operations.sort((a, b) => b.timestamp - a.timestamp);
                    updateOperationsList();
                    updateBalance();
                }
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π:', operations.length);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                operations = [];
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ localStorage
        function saveOperations() {
            try {
                localStorage.setItem('kopeyka_operations', JSON.stringify(operations));
                console.log('–û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', operations.length);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        function updateOperationsList() {
            operationsList.innerHTML = '';
            
            if (operations.length === 0) {
                operationsList.innerHTML = `
                    <div class="empty-state">
                        <div style="text-align: center; padding: 40px 20px; color: #666;">
                            <div style="font-size: 48px; margin-bottom: 10px;">üìä</div>
                            <div style="font-size: 16px;">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                            <div style="font-size: 14px; margin-top: 5px;">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é!</div>
                        </div>
                    </div>
                `;
                return;
            }
            
            operations.forEach(operation => {
                const operationElement = document.createElement('div');
                operationElement.className = 'operation-item';
                
                operationElement.innerHTML = `
                    <div class="operation-info">
                        <div class="category">${getCategoryIcon(operation.category)} ${getCategoryName(operation.category)}</div>
                        <div class="comment">${operation.comment || ''}</div>
                        <div class="date">${operation.date}</div>
                    </div>
                    <div class="amount ${operation.amount > 0 ? 'income' : 'expense'}">
                        ${operation.amount > 0 ? '+' : ''}${operation.amount} ‚ÇΩ
                    </div>
                `;
                
                operationsList.appendChild(operationElement);
            });
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        function getCategoryIcon(category) {
            const icons = {
                'food': 'üçî',
                'transport': 'üöó',
                'entertainment': 'üé¨',
                'health': 'üíä',
                'income': 'üí∞',
                'other': 'üìÅ'
            };
            return icons[category] || 'üìÅ';
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        function getCategoryName(category) {
            const names = {
                'food': '–ï–¥–∞',
                'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
                'entertainment': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
                'income': '–î–æ—Ö–æ–¥',
                'other': '–î—Ä—É–≥–æ–µ'
            };
            return names[category] || category;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        function updateBalance() {
            const total = operations.reduce((sum, operation) => sum + operation.amount, 0);
            totalBalanceElement.textContent = `${total.toFixed(2)} ‚ÇΩ`;
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            if (total >= 0) {
                totalBalanceElement.style.color = '#4caf50';
            } else {
                totalBalanceElement.style.color = '#f44336';
            }
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                hideModal();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                hideModal();
            }
        });
        
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    });
}
