// ==================== –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VK ==================== //
console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ö–æ–ø–µ–π–∫–∞...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK Bridge
function initializeVKSafely() {
    return new Promise((resolve) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ VK Bridge –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–Ω
        if (typeof vkBridge !== 'undefined' && vkBridge && typeof vkBridge.send === 'function') {
            console.log('üîó VK Bridge –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            vkBridge.send('VKWebAppInit', {})
                .then((data) => {
                    console.log('‚úÖ VK Bridge —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                    resolve(true);
                })
                .catch((error) => {
                    console.log('‚ö†Ô∏è VK Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ:', error);
                    resolve(false);
                });
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ VK Bridge –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
            setTimeout(() => {
                console.log('‚è∞ –¢–∞–π–º–∞—É—Ç VK Bridge, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
                resolve(false);
            }, 3000);
        } else {
            console.log('üåê VK Bridge –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            resolve(false);
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
initializeVKSafely().then((isVK) => {
    console.log(isVK ? 'üéØ –†–µ–∂–∏–º VK' : 'üñ•Ô∏è –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞');
    startApp();
});

// ==================== –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ==================== //
let chart = null;

function startApp() {
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initApp);
    } else {
        initApp();
    }
}

function initApp() {
    console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω!');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const elements = {
        addButton: document.getElementById('add-operation-btn'),
        modal: document.getElementById('modal'),
        cancelBtn: document.getElementById('cancel-btn'),
        saveBtn: document.getElementById('save-btn'),
        operationsList: document.getElementById('operations-list'),
        totalBalanceElement: document.getElementById('total-balance'),
        periodSelect: document.getElementById('period-select'),
        tabButtons: document.querySelectorAll('.tab'),
        tabContents: document.querySelectorAll('.tab-content'),
        chart: document.getElementById('chart')
    };
    
    console.log('üîç –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        addButton: !!elements.addButton,
        modal: !!elements.modal,
        cancelBtn: !!elements.cancelBtn,
        saveBtn: !!elements.saveBtn,
        operationsList: !!elements.operationsList,
        tabButtons: elements.tabButtons.length,
        tabContents: elements.tabContents.length
    });
    
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤—ã—Ö–æ–¥–∏–º
    if (!elements.addButton || !elements.modal || !elements.operationsList) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    let operations = [];
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadOperations();
    
    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==================== //
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    elements.addButton.addEventListener('click', showModal);
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    if (elements.cancelBtn) {
        elements.cancelBtn.addEventListener('click', hideModal);
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (elements.saveBtn) {
        elements.saveBtn.addEventListener('click', saveOperation);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    if (elements.tabButtons.length > 0) {
        elements.tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                const tabName = this.getAttribute('data-tab');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                elements.tabButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                elements.tabContents.forEach(content => content.classList.remove('active'));
                const activeTab = document.getElementById(`${tabName}-tab`);
                if (activeTab) {
                    activeTab.classList.add('active');
                }
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
                if (tabName === 'statistics') {
                    updateChart();
                }
            });
        });
    }
    
    // –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
    if (elements.periodSelect) {
        elements.periodSelect.addEventListener('change', updateChart);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    window.addEventListener('click', function(event) {
        if (event.target === elements.modal) {
            hideModal();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            hideModal();
        }
    });
    
    // ==================== –§–£–ù–ö–¶–ò–ò ==================== //
    
    function showModal() {
        console.log('üìã –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
        elements.modal.style.display = 'block';
        setTimeout(() => {
            const amountInput = document.getElementById('amount-input');
            if (amountInput) amountInput.focus();
        }, 100);
    }
    
    function hideModal() {
        console.log('üìã –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
        elements.modal.style.display = 'none';
        const amountInput = document.getElementById('amount-input');
        const commentInput = document.getElementById('comment-input');
        if (amountInput) amountInput.value = '';
        if (commentInput) commentInput.value = '';
    }
    
    function saveOperation() {
        const amountInput = document.getElementById('amount-input');
        const categorySelect = document.getElementById('category-select');
        const commentInput = document.getElementById('comment-input');
        
        const amount = amountInput ? amountInput.value : '';
        const category = categorySelect ? categorySelect.value : 'other';
        const comment = commentInput ? commentInput.value : '';
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', { amount, category, comment });
        
        if (amount && !isNaN(amount)) {
            const newOperation = {
                id: Date.now(),
                amount: parseFloat(amount),
                category: category,
                comment: comment,
                date: new Date().toLocaleDateString('ru-RU'),
                timestamp: Date.now()
            };
            
            operations.unshift(newOperation);
            saveOperations();
            updateOperationsList();
            updateBalance();
            updateChart();
            hideModal();
            
            showNotification('–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! ‚úÖ');
        } else {
            if (amountInput) {
                amountInput.style.borderColor = '#f56565';
                setTimeout(() => {
                    amountInput.style.borderColor = '#e2e8f0';
                }, 1000);
            }
        }
    }
    
    function loadOperations() {
        try {
            const saved = localStorage.getItem('kopeyka_operations');
            if (saved) {
                operations = JSON.parse(saved);
                console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π:', operations.length);
                updateOperationsList();
                updateBalance();
                // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∏–∞–≥—Ä–∞–º–º—ã
                setTimeout(updateChart, 100);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            operations = [];
        }
    }
    
    function saveOperations() {
        try {
            localStorage.setItem('kopeyka_operations', JSON.stringify(operations));
            console.log('üíæ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', operations.length);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    function updateOperationsList() {
        if (!elements.operationsList) return;
        
        elements.operationsList.innerHTML = '';
        
        if (operations.length === 0) {
            elements.operationsList.innerHTML = `
                <div class="empty-state">
                    <div class="icon">üìä</div>
                    <div class="text">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                    <div class="subtext">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é!</div>
                </div>
            `;
            return;
        }
        
        operations.forEach(operation => {
            const operationElement = document.createElement('div');
            operationElement.className = `operation-item ${operation.amount > 0 ? 'income' : 'expense'}`;
            
            operationElement.innerHTML = `
                <div class="operation-info">
                    <div class="category">${getCategoryIcon(operation.category)} ${getCategoryName(operation.category)}</div>
                    <div class="comment">${operation.comment || ''}</div>
                    <div class="date">${operation.date}</div>
                </div>
                <div class="amount ${operation.amount > 0 ? 'income' : 'expense'}">
                    ${operation.amount > 0 ? '+' : ''}${operation.amount} ‚ÇΩ
                </div>
            `;
            
            elements.operationsList.appendChild(operationElement);
        });
    }
    
    function updateBalance() {
        if (!elements.totalBalanceElement) return;
        
        const total = operations.reduce((sum, op) => sum + op.amount, 0);
        elements.totalBalanceElement.textContent = `${total.toFixed(2)} ‚ÇΩ`;
        elements.totalBalanceElement.style.color = total >= 0 ? '#48bb78' : '#f56565';
    }
    
    function updateChart() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Chart.js
        if (typeof Chart === 'undefined') {
            console.log('üìä Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã');
            return;
        }
        
        const periodSelect = document.getElementById('period-select');
        const chartCanvas = document.getElementById('chart');
        const chartLegend = document.getElementById('chart-legend');
        
        if (!periodSelect || !chartCanvas || !chartLegend) return;
        
        const period = periodSelect.value;
        const now = Date.now();
        let filteredOperations = operations;
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (period === 'week') {
            const weekAgo = now - 7 * 24 * 60 * 60 * 1000;
            filteredOperations = operations.filter(op => op.timestamp > weekAgo);
        } else if (period === 'month') {
            const monthAgo = now - 30 * 24 * 60 * 60 * 1000;
            filteredOperations = operations.filter(op => op.timestamp > monthAgo);
        }
        
        // –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        const expenses = filteredOperations.filter(op => op.amount < 0);
        
        if (expenses.length === 0) {
            chartLegend.innerHTML = `
                <div class="empty-state">
                    <div class="icon">üìà</div>
                    <div class="text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                    <div class="subtext">–î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>
                </div>
            `;
            if (chart) chart.destroy();
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categories = {};
        expenses.forEach(op => {
            const category = op.category;
            if (!categories[category]) {
                categories[category] = 0;
            }
            categories[category] += Math.abs(op.amount);
        });
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ
        const sortedCategories = Object.entries(categories)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 8);
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        const labels = sortedCategories.map(([category]) => getCategoryName(category));
        const data = sortedCategories.map(([_, amount]) => amount);
        const backgroundColors = [
            '#4facfe', '#ff6b6b', '#48bb78', '#f56565', 
            '#f6ad55', '#9f7aea', '#ed64a6', '#667eea'
        ];
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        const ctx = chartCanvas.getContext('2d');
        if (chart) chart.destroy();
        
        chart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: backgroundColors,
                    borderWidth: 0,
                    borderRadius: 8,
                    hoverOffset: 12
                }]
            },
            options: {
                cutout: '65%',
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.label}: ${context.raw.toFixed(2)} ‚ÇΩ`;
                            }
                        }
                    }
                },
                animation: { duration: 1000, easing: 'easeOutQuart' }
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
        updateChartLegend(sortedCategories, backgroundColors);
    }
    
    function updateChartLegend(categories, colors) {
        const legend = document.getElementById('chart-legend');
        if (!legend) return;
        
        legend.innerHTML = '';
        
        categories.forEach(([category, amount], index) => {
            const legendItem = document.createElement('div');
            legendItem.className = 'legend-item';
            legendItem.innerHTML = `
                <div class="legend-color" style="background: ${colors[index]}"></div>
                <div class="legend-text">${getCategoryName(category)}</div>
                <div class="legend-amount">${amount.toFixed(2)} ‚ÇΩ</div>
            `;
            legend.appendChild(legendItem);
        });
    }
    
    function getCategoryIcon(category) {
        const icons = {
            'food': 'üçî', 'transport': 'üöó', 'entertainment': 'üé¨',
            'health': 'üíä', 'shopping': 'üõçÔ∏è', 'income': 'üí∞', 'other': 'üìÅ'
        };
        return icons[category] || 'üìÅ';
    }
    
    function getCategoryName(category) {
        const names = {
            'food': '–ï–¥–∞', 'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'entertainment': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'health': '–ó–¥–æ—Ä–æ–≤—å–µ', 'shopping': '–ü–æ–∫—É–ø–∫–∏', 'income': '–î–æ—Ö–æ–¥', 'other': '–î—Ä—É–≥–æ–µ'
        };
        return names[category] || category;
    }
    
    function showNotification(message) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VK —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (typeof vkBridge !== 'undefined' && vkBridge && typeof vkBridge.send === 'function') {
            try {
                vkBridge.send('VKWebAppShowSnackbar', { text: message });
                return;
            } catch (error) {
                console.log('‚ö†Ô∏è VK —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            }
        }
        
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #48bb78;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            font-weight: 500;
        `;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transition = 'opacity 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 2000);
    }
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!');
}
